# -*- coding: utf-8 -*-
"""minimax.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1irLJCUTwrLilX4OpkcQWEEXuc5XWB8Jd
"""

def minimax(node, depth, maximizingPlayer, move):
  if (depth == 0):
    return node.value, move
  if (maximizingPlayer):
    value=float("-inf")
    move=""
    for child in node.children:
      minimaxResult=minimax(child, depth-1, False, node.move)[0]
      if(value<minimaxResult):
        move=child.move
      value = max(value, minimaxResult)
      
    return value, move
  else:
    value=float("inf")
    move =""
    for child in node.children:
      minimaxResult=minimax(child, depth-1, False, node.move)[0]
      if(value>minimaxResult):
        move=child.move
      value = min(value, minimaxResult)
    return value, move

def minimaxAlphaBeta(node, depth,alpha, beta, maximizingPlayer, move):
  if (depth == 0):
    return node.value, move
  if (maximizingPlayer):
    value=float("-inf")
    for child in node.children:
      minimaxResult=minimaxAlphaBeta(child, depth-1,alpha,beta, False, node.move)[0]
      if(value<minimaxResult):
        move=child.move
      value = max(value, minimaxResult)
      alpha = max(alpha, value)
      if(alpha>=beta):
        break
    return value, move
  else:
    value=float("inf")
    for child in node.children:
      minimaxResult=minimaxAlphaBeta(child, depth-1,alpha,beta, False, node.move)[0]
      if(value>minimaxResult):
        move=child.move
      value = min(value, minimaxResult)
      beta = min(beta, value)
      if(beta<=alpha):
        break
    return value, move